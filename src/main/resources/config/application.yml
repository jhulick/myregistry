# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overriden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

# ===================================================================
# Eureka server configuration (eureka.server.*)
#
# Full list of properties with default values at:
# https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/EurekaServerConfigBean.java
#
# Documentation at:
# https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig.java
# ===================================================================

server:
    port: 8761

eureka:
    instance:
        appname: registry
        hostname: localhost
        prefer-ip-address: true
    server:
        enable-self-preservation: true
        waitTimeInMsWhenSyncEmpty: 0
    client:
        registerWithEureka: false
        fetchRegistry: false
        serviceUrl:
            defaultZone: http://localhost:${server.port}/eureka/
    dashboard:
        enabled: false

spring:
    application:
        name: max-registry

# In order to enable encryption and decryption of config property files, you need to install
# the unlimited strength Java Cryptography Extension (JCE) in your config server environment.
# This doesnâ€™t come with the JVM by default.
#
# A better approach would be to use environment variables. The location property is probably
# safe in the application.yml file, but you could also control it with an environment variable.
encrypt:
    keyStore:
        location: classpath:/server.jks
        password: letmein
        alias: mytestkey
        secret: changeme

